{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","string","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","length","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,SAAO,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BACtBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,UCJXC,SAAW,SAACZ,GACvB,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OAExBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,SCR7BS,SAAY,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,YAAaC,EAAmBF,EAAnBE,aACxC,OACCnB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACTiB,KAAK,SACPF,YAAcA,EACdG,SAAWF,MC8ECG,qBA/Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeFP,aAAe,SAACW,GACdP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftCX,EAAKY,MAAQ,CACXC,OAAQ,oBACRxB,SAAU,GACVoB,YAAa,IALHT,mFAoBM,IAAAc,EAAAX,KAElBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKN,SAAS,CAAEnB,SAAU8B,uCAGpC,IAAAC,EAE2BjB,KAAKS,MAA/BvB,EAFD+B,EAEC/B,SAAUoB,EAFXW,EAEWX,YACZY,EAAmBhC,EAASiC,OAAO,SAAAtC,GAAO,OAC9CA,EAAQE,KAAKqC,cAAcC,SAASf,EAAYc,iBAElD,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC8C,EAAD,CACE9B,YAAY,kBACZC,aAAcO,KAAKP,eAGrBnB,EAAAC,EAAAC,cAAA,sCAA6BF,EAAAC,EAAAC,cAAA,SAAK0C,EAAiBK,SACnDjD,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,SAAK8B,IACtBhC,EAAAC,EAAAC,cAACgD,EAAD,CAAUtC,SAAWgC,YA9CXO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.4beb3c5f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div  className='card-container'>\r\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    // <div className='card-list'>{props.children}</div>\r\n    <div className='card-list'>\r\n      {\r\n        props.monsters.map(monster => (\r\n          // <h3 key={monster.id}>{ monster.name }</h3>\r\n          <Card key={monster.id} monster={monster} />\r\n          )\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./search-box.styles.css\"\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n\treturn (\r\n\t\t<input\r\n\t  \tclassName=\"search\"\r\n    \ttype=\"search\"\r\n\t\t\tplaceholder={ placeholder }\r\n\t\t\tonChange={ handleChange }\r\n    \t// onChange={e => this.setState({ searchField: e.target.value })}\r\n  \t/>\r\n\t)\r\n};\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      string: 'Hello Yihua Zhang',\r\n      monsters: [],\r\n      searchField: ''\r\n      // monsters: [\r\n      //   { name: 'Frankenstein', id: 1 },\r\n      //   { name: 'Dracula', id: 2 },\r\n      //   { name: 'Zombie', id: 3 }\r\n      // ]\r\n    }\r\n\r\n    // this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log('componentDidMount()');\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      // .then(users => console.log(users))\r\n      .then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n  render() {\r\n    // console.log('render()');\r\n    const { monsters, searchField } = this.state; // destructuring\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n          // handleChange= {e => this.setState({ searchField: e.target.value })}\r\n        />\r\n        <p>filteredMonsters.length = <b>{ filteredMonsters.length }</b></p>\r\n        <p>searchField = <b>{ searchField }</b></p>\r\n        <CardList monsters={ filteredMonsters } />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // render() {\r\n  //   console.log('render()');\r\n  //   return (\r\n  //     <div className=\"App\">\r\n  //       <CardList name=\"Yihua\">\r\n  //         {\r\n  //           this.state.monsters.map(\r\n  //             monster => <h3 key={monster.id}>{ monster.name }</h3>\r\n  //           )\r\n  //         }\r\n  //       </CardList>\r\n  //     </div>\r\n  //   )\r\n  // }\r\n\r\n  // render() {\r\n  //   return (\r\n  //     <div className=\"App\">\r\n  //       <header className=\"App-header\">\r\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n  //         <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">Learn React</a>\r\n  //         <p>{ this.state.string }</p>\r\n  //         <p>{ this.state.monsters.length }</p>\r\n  //         <button onClick={ () => this.setState({ string: 'Hello Andrei Neagoie' }) }>Change Text</button>\r\n  //       </header>\r\n  //     </div>\r\n  //   )\r\n  // }\r\n}\r\n\r\nexport default App;\r\n\r\n// import React from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}